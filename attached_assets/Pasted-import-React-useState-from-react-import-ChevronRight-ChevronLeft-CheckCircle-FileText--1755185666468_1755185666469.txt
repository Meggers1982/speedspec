import React, { useState } from 'react';
import { ChevronRight, ChevronLeft, CheckCircle, FileText, Lightbulb, Wrench, Target, Rocket, Download, Copy } from 'lucide-react';

const MVPBuildTool = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState({
    // Step 1: The Idea
    problem: '',
    solution: '',
    targetUser: '',
    
    // Step 2: Core Features
    mainFeature: '',
    supportingFeatures: ['', ''],
    
    // Step 3: User Flow
    userSteps: ['', '', ''],
    
    // Step 4: Build Specs
    platform: [],
    techNeeds: '',
    timeframe: ''
  });

  const updateFormData = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const updateArrayField = (field, index, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].map((item, i) => i === index ? value : item)
    }));
  };

  const togglePlatform = (platform) => {
    setFormData(prev => ({
      ...prev,
      platform: prev.platform.includes(platform) 
        ? prev.platform.filter(p => p !== platform)
        : [...prev.platform, platform]
    }));
  };

  const exportToPDF = () => {
    const printStyles = `
      <style>
        @media print {
          body * { visibility: hidden; }
          .print-area, .print-area * { visibility: visible; }
          .print-area { 
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            padding: 20px;
            font-family: Arial, sans-serif;
            line-height: 1.6;
          }
          .no-print { display: none !important; }
          h1 { font-size: 24px; margin-bottom: 10px; }
          h2 { font-size: 18px; margin: 20px 0 10px 0; color: #333; }
          h3 { font-size: 14px; margin: 10px 0 5px 0; color: #666; }
          .section { margin-bottom: 25px; border-left: 4px solid #ccc; padding-left: 15px; }
        }
      </style>
    `;
    
    const styleSheet = document.createElement('style');
    styleSheet.innerHTML = printStyles;
    document.head.appendChild(styleSheet);
    
    window.print();
    
    setTimeout(() => {
      document.head.removeChild(styleSheet);
    }, 1000);
  };

  const copyToClipboard = async () => {
    const textContent = `
MVP BUILD SPEC
==============

📋 PROJECT OVERVIEW
Problem: ${formData.problem || "Not specified"}
Solution: ${formData.solution || "Not specified"} 
Target User: ${formData.targetUser || "Not specified"}
Timeline: ${formData.timeframe || "Not specified"}

⚙️ FEATURE SPEC
Core Feature: ${formData.mainFeature || "Not specified"}
Supporting Features:
${formData.supportingFeatures.filter(f => f.trim()).map(f => `• ${f}`).join('\n')}

🎯 USER FLOW
${formData.userSteps.filter(s => s.trim()).map((step, i) => `${i + 1}. ${step}`).join('\n')}

🔨 TECHNICAL SPEC
Platform(s): ${formData.platform.join(', ') || "Not specified"}
Technical Requirements: ${formData.techNeeds || "Not specified"}
    `.trim();

    try {
      await navigator.clipboard.writeText(textContent);
      alert('MVP spec copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy: ', err);
      alert('Copy failed - please try again');
    }
  };

  const steps = [
    {
      title: "Your Idea",
      icon: <Lightbulb className="w-6 h-6" />,
      description: "What are you building?"
    },
    {
      title: "Core Features",
      icon: <Wrench className="w-6 h-6" />,
      description: "What does it need to do?"
    },
    {
      title: "User Flow",
      icon: <Target className="w-6 h-6" />,
      description: "How do people use it?"
    },
    {
      title: "Build Plan",
      icon: <Rocket className="w-6 h-6" />,
      description: "Let's make it happen"
    },
    {
      title: "Build Spec",
      icon: <FileText className="w-6 h-6" />,
      description: "Your prototype blueprint"
    }
  ];

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const renderStep = () => {
    switch(currentStep) {
      case 0:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-lg font-medium mb-3">What problem are you trying to solve?</label>
              <textarea
                className="w-full p-4 border border-gray-300 rounded-lg h-24 resize-none"
                placeholder="Example: People waste time manually splitting bills at restaurants and it creates awkward conversations about who owes what."
                value={formData.problem}
                onChange={(e) => updateFormData('problem', e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-lg font-medium mb-3">What's your solution?</label>
              <textarea
                className="w-full p-4 border border-gray-300 rounded-lg h-24 resize-none"
                placeholder="Example: An app that automatically calculates splits and sends payment requests so everyone knows exactly what they owe."
                value={formData.solution}
                onChange={(e) => updateFormData('solution', e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-lg font-medium mb-3">Who's your target user?</label>
              <input
                className="w-full p-4 border border-gray-300 rounded-lg"
                placeholder="Example: Young professionals who eat out with friends regularly"
                value={formData.targetUser}
                onChange={(e) => updateFormData('targetUser', e.target.value)}
              />
            </div>
          </div>
        );

      case 1:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-lg font-medium mb-3">What's the ONE main thing your app does?</label>
              <input
                className="w-full p-4 border border-gray-300 rounded-lg"
                placeholder="Example: Split a bill and send payment requests"
                value={formData.mainFeature}
                onChange={(e) => updateFormData('mainFeature', e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-lg font-medium mb-3">What 2 supporting features does it need?</label>
              {formData.supportingFeatures.map((feature, index) => (
                <input
                  key={index}
                  className="w-full p-3 border border-gray-300 rounded-lg mb-3"
                  placeholder={`Supporting feature ${index + 1}${index === 0 ? ' (Example: Calculate individual amounts)' : ' (Example: Send text notifications)'}`}
                  value={feature}
                  onChange={(e) => updateArrayField('supportingFeatures', index, e.target.value)}
                />
              ))}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-lg font-medium mb-3">Simple user flow - what are the 3 main steps?</label>
              {formData.userSteps.map((step, index) => (
                <div key={index} className="mb-3">
                  <input
                    className="w-full p-3 border border-gray-300 rounded-lg"
                    placeholder={`Step ${index + 1}${index === 0 ? ' (Example: Enter bill total and tip)' : index === 1 ? ' (Example: Add friends and their items)' : ' (Example: Send payment requests)'}`}
                    value={step}
                    onChange={(e) => updateArrayField('userSteps', index, e.target.value)}
                  />
                </div>
              ))}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-lg font-medium mb-3">What platform(s) will you build on? (Select all that apply)</label>
              <div className="grid grid-cols-2 gap-3">
                {[
                  'Simple website', 
                  'Mobile app (iOS/Android)', 
                  'Web app', 
                  'Browser extension',
                  'Desktop app',
                  'Not sure yet'
                ].map(option => (
                  <label key={option} className="flex items-center p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                    <input
                      type="checkbox"
                      checked={formData.platform.includes(option)}
                      onChange={() => togglePlatform(option)}
                      className="mr-3"
                    />
                    {option}
                  </label>
                ))}
              </div>
            </div>
            
            <div>
              <label className="block text-lg font-medium mb-3">What technical stuff do you need?</label>
              <textarea
                className="w-full p-4 border border-gray-300 rounded-lg h-24 resize-none"
                placeholder="Example: User accounts, payment processing, SMS sending, data storage"
                value={formData.techNeeds}
                onChange={(e) => updateFormData('techNeeds', e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-lg font-medium mb-3">When do you want a working prototype?</label>
              <div className="grid grid-cols-2 gap-3">
                {[
                  '2 weeks', 
                  '1 month', 
                  '2 months', 
                  '3 months',
                  '6 months',
                  'Just exploring'
                ].map(option => (
                  <label key={option} className="flex items-center p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
                    <input
                      type="radio"
                      name="timeframe"
                      value={option}
                      checked={formData.timeframe === option}
                      onChange={(e) => updateFormData('timeframe', e.target.value)}
                      className="mr-3"
                    />
                    {option}
                  </label>
                ))}
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-lg">
            {/* Export Buttons */}
            <div className="mb-6 flex justify-center gap-4 no-print">
              <button
                onClick={exportToPDF}
                className="flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
              >
                <Download className="w-5 h-5 mr-2" />
                Download PDF
              </button>
              <button
                onClick={copyToClipboard}
                className="flex items-center px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 font-medium"
              >
                <Copy className="w-5 h-5 mr-2" />
                Copy Text
              </button>
            </div>

            <div className="print-area">
              <div className="mb-8 text-center">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Rocket className="w-8 h-8 text-green-600" />
                </div>
                <h1 className="text-3xl font-bold text-gray-900 mb-2">Your Build Spec</h1>
                <p className="text-gray-600">Everything you need to start building your prototype</p>
              </div>

              <div className="space-y-8">
                {/* Project Overview */}
                <section className="bg-blue-50 p-6 rounded-lg">
                  <h2 className="text-xl font-bold text-blue-900 mb-4">📋 Project Overview</h2>
                  <div className="space-y-3">
                    <div>
                      <span className="font-medium text-blue-800">Problem:</span>
                      <p className="text-blue-700 mt-1">{formData.problem || "Not specified"}</p>
                    </div>
                    <div>
                      <span className="font-medium text-blue-800">Solution:</span>
                      <p className="text-blue-700 mt-1">{formData.solution || "Not specified"}</p>
                    </div>
                    <div>
                      <span className="font-medium text-blue-800">Target User:</span>
                      <p className="text-blue-700">{formData.targetUser || "Not specified"}</p>
                    </div>
                    <div>
                      <span className="font-medium text-blue-800">Timeline:</span>
                      <p className="text-blue-700">{formData.timeframe || "Not specified"}</p>
                    </div>
                  </div>
                </section>

                {/* Feature Spec */}
                <section className="bg-green-50 p-6 rounded-lg">
                  <h2 className="text-xl font-bold text-green-900 mb-4">⚙️ Feature Spec</h2>
                  <div className="space-y-3">
                    <div>
                      <span className="font-medium text-green-800">Core Feature:</span>
                      <p className="text-green-700 text-lg">{formData.mainFeature || "Not specified"}</p>
                    </div>
                    <div>
                      <span className="font-medium text-green-800">Supporting Features:</span>
                      <ul className="text-green-700 ml-4 space-y-1">
                        {formData.supportingFeatures.filter(f => f.trim()).map((feature, i) => (
                          <li key={i}>• {feature}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </section>

                {/* User Flow */}
                <section className="bg-purple-50 p-6 rounded-lg">
                  <h2 className="text-xl font-bold text-purple-900 mb-4">🎯 User Flow</h2>
                  <div className="space-y-3">
                    {formData.userSteps.filter(s => s.trim()).map((step, i) => (
                      <div key={i} className="flex items-center">
                        <div className="w-8 h-8 bg-purple-200 rounded-full flex items-center justify-center text-purple-800 font-bold mr-4">
                          {i + 1}
                        </div>
                        <p className="text-purple-700">{step}</p>
                      </div>
                    ))}
                  </div>
                </section>

                {/* Technical Spec */}
                <section className="bg-orange-50 p-6 rounded-lg">
                  <h2 className="text-xl font-bold text-orange-900 mb-4">🔨 Technical Spec</h2>
                  <div className="space-y-3">
                    <div>
                      <span className="font-medium text-orange-800">Platform(s):</span>
                      <p className="text-orange-700">{formData.platform.join(', ') || "Not specified"}</p>
                    </div>
                    <div>
                      <span className="font-medium text-orange-800">Technical Requirements:</span>
                      <p className="text-orange-700">{formData.techNeeds || "Not specified"}</p>
                    </div>
                  </div>
                </section>

                {/* Quick Start Actions */}
                <section className="bg-yellow-50 p-6 rounded-lg border-l-4 border-yellow-400">
                  <h2 className="text-xl font-bold text-yellow-900 mb-4">🚀 Start Building Today</h2>
                  <div className="space-y-4">
                    <div>
                      <h3 className="font-medium text-yellow-800 mb-2">This Week:</h3>
                      <ul className="text-yellow-700 space-y-1 ml-4">
                        <li>• Sketch your user interface on paper or in Figma</li>
                        <li>• Set up your development environment</li>
                        <li>• Build the simplest version of your core feature</li>
                      </ul>
                    </div>
                    
                    <div>
                      <h3 className="font-medium text-yellow-800 mb-2">Next 2 Weeks:</h3>
                      <ul className="text-yellow-700 space-y-1 ml-4">
                        <li>• Complete the basic user flow</li>
                        <li>• Add your supporting features</li>
                        <li>• Test it yourself and fix obvious bugs</li>
                      </ul>
                    </div>
                    
                    <div>
                      <h3 className="font-medium text-yellow-800 mb-2">Month 1 Goal:</h3>
                      <ul className="text-yellow-700 space-y-1 ml-4">
                        <li>• Have 5 people try your prototype</li>
                        <li>• Collect feedback and make quick improvements</li>
                        <li>• Decide if you want to keep building or pivot</li>
                      </ul>
                    </div>
                  </div>
                </section>

                {/* Quick Resources */}
                <section className="bg-gray-50 p-6 rounded-lg">
                  <h2 className="text-xl font-bold text-gray-900 mb-4">🛠️ Quick Build Resources</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <h3 className="font-medium text-gray-800 mb-2">No-Code Options:</h3>
                      <ul className="text-gray-600 space-y-1">
                        <li>• Bubble (web apps)</li>
                        <li>• Glide (mobile apps)</li>
                        <li>• Webflow (websites)</li>
                        <li>• Airtable + Zapier (automation)</li>
                      </ul>
                    </div>
                    <div>
                      <h3 className="font-medium text-gray-800 mb-2">Fast Code Options:</h3>
                      <ul className="text-gray-600 space-y-1">
                        <li>• Vercel + Next.js (web apps)</li>
                        <li>• Supabase (database + auth)</li>
                        <li>• Expo (mobile apps)</li>
                        <li>• Claude/ChatGPT (code help)</li>
                      </ul>
                    </div>
                  </div>
                </section>
              </div>

              <div className="mt-8 p-4 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg text-white text-center">
                <p className="text-lg font-medium">
                  🎯 Focus: Build the simplest version that works, get it in front of users fast, then improve.
                </p>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  if (currentStep === 4) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        {renderStep()}
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-100 py-8">
      <div className="max-w-3xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-6">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">SpeedSpec</h1>
          <p className="text-gray-600 text-lg">From idea to prototype in minutes</p>
        </div>

        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-4">
            {steps.slice(0, -1).map((step, index) => (
              <div key={index} className="flex items-center">
                <div className={`flex items-center justify-center w-12 h-12 rounded-full ${
                  index <= currentStep ? 'bg-green-600 text-white' : 'bg-gray-300 text-gray-600'
                }`}>
                  {index < currentStep ? <CheckCircle className="w-6 h-6" /> : step.icon}
                </div>
                {index < steps.length - 2 && (
                  <div className={`w-20 h-1 mx-2 ${
                    index < currentStep ? 'bg-green-600' : 'bg-gray-300'
                  }`} />
                )}
              </div>
            ))}
          </div>
          <div className="text-center">
            <h1 className="text-3xl font-bold text-gray-900">{steps[currentStep].title}</h1>
            <p className="text-gray-600 mt-1 text-lg">{steps[currentStep].description}</p>
          </div>
        </div>

        {/* Form Content */}
        <div className="bg-white rounded-lg shadow-lg p-8 mb-8">
          {renderStep()}
        </div>

        {/* Navigation */}
        <div className="flex justify-between">
          <button
            onClick={prevStep}
            disabled={currentStep === 0}
            className="flex items-center px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronLeft className="w-5 h-5 mr-2" />
            Back
          </button>
          
          <button
            onClick={nextStep}
            disabled={currentStep === steps.length - 1}
            className="flex items-center px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium"
          >
            {currentStep === steps.length - 2 ? 'Get My Build Spec' : 'Next'}
            <ChevronRight className="w-5 h-5 ml-2" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default MVPBuildTool;